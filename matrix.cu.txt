#include <stdio.h>

#define TILE_WIDTH 16

// Kernel function to perform matrix multiplication on GPU
__global__ void matrixMul(int *a, int *b, int *c, int width) {
    // Calculate global row and column for each thread
    int row = blockIdx.y * blockDim.y + threadIdx.y;
    int col = blockIdx.x * blockDim.x + threadIdx.x;
    
    // Temporary variable to store the sum of products
    int sum = 0;
    
    // Perform multiplication for each element of the result matrix
    for (int i = 0; i < width; ++i) {
        sum += a[row * width + i] * b[i * width + col];
    }
    
    // Write the result to the output matrix
    c[row * width + col] = sum;
}

int main() {
    int width = 1024; // Width of matrices
    int *a, *b, *c; // Host matrices
    int *d_a, *d_b, *d_c; // Device matrices
    int size = width * width * sizeof(int); // Size of matrices in bytes
    
    // Allocate memory for host matrices
    a = (int*)malloc(size);
    b = (int*)malloc(size);
    c = (int*)malloc(size);
    
    // Initialize host matrices
    for (int i = 0; i < width * width; ++i) {
        a[i] = i;
        b[i] = i * 2;
    }
    
    // Allocate memory for device matrices
    cudaMalloc(&d_a, size);
    cudaMalloc(&d_b, size);
    cudaMalloc(&d_c, size);
    
    // Copy host matrices to device
    cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
    cudaMemcpy(d_b, b, size, cudaMemcpyHostToDevice);
    
    // Define grid and block dimensions
    dim3 dimGrid((width - 1) / TILE_WIDTH + 1, (width - 1) / TILE_WIDTH + 1, 1);
    dim3 dimBlock(TILE_WIDTH, TILE_WIDTH, 1);
    
    // Launch kernel to perform matrix multiplication on GPU
    matrixMul<<<dimGrid, dimBlock>>>(d_a, d_b, d_c, width);
    
    // Copy result from device to host
    cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);
    
    // Verify result
    printf("Result Matrix:\n");
    for (int i = 0; i < 10; i++) {
        for (int j = 0; j < 10; j++) {
            printf("%d\t", c[i * width + j]);
        }
        printf("\n");
    }
    
    // Free device memory
    cudaFree(d_a);
    cudaFree(d_b);
    cudaFree(d_c);
    
    // Free host memory
    free(a);
    free(b);
    free(c);
    
    return 0;
}
