#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

#define ARRAY_SIZE 1000

int main(int argc, char *argv[]) {
    int size, rank;
    MPI_Init(&argc, &argv);
    MPI_Comm_size(MPI_COMM_WORLD, &size);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);

    // Generate random data
    int *data = NULL;
    if (rank == 0) {
        data = (int *)malloc(ARRAY_SIZE * sizeof(int));
        srand(time(NULL));
        for (int i = 0; i < ARRAY_SIZE; i++) {
            data[i] = rand() % 1000;
        }
    }

    // Scatter data among processes
    int local_size = ARRAY_SIZE / size;
    int *local_data = (int *)malloc(local_size * sizeof(int));
    MPI_Scatter(data, local_size, MPI_INT, local_data, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Perform local reduction
    int local_min = local_data[0];
    int local_max = local_data[0];
    int local_sum = 0;
    for (int i = 0; i < local_size; i++) {
        local_min = (local_data[i] < local_min) ? local_data[i] : local_min;
        local_max = (local_data[i] > local_max) ? local_data[i] : local_max;
        local_sum += local_data[i];
    }

    // Gather local results to root process
    int global_min, global_max, global_sum;
    MPI_Reduce(&local_min, &global_min, 1, MPI_INT, MPI_MIN, 0, MPI_COMM_WORLD);
    MPI_Reduce(&local_max, &global_max, 1, MPI_INT, MPI_MAX, 0, MPI_COMM_WORLD);
    MPI_Reduce(&local_sum, &global_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Calculate global average
    double global_avg = (double)global_sum / ARRAY_SIZE;

    // Print results from root process
    if (rank == 0) {
        printf("Min: %d\n", global_min);
        printf("Max: %d\n", global_max);
        printf("Sum: %d\n", global_sum);
        printf("Average: %.2f\n", global_avg);
    }

    // Clean up
    if (rank == 0) {
        free(data);
    }
    free(local_data);

    MPI_Finalize();
    return 0;
}
